[0/1] Planning build
Building for debugging...
[0/5] Write sources
[1/5] Write swift-version--58304C5D6DBC2206.txt
[3/7] Emitting module Core
[4/7] Compiling Core QDBReader.swift
/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:53:13: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 48 |     private func discoverSchema() async throws {
 49 |         guard let dbPool else { return }
 50 |         try await dbPool.read { db in
    |                               `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 51 |             let tables = try String.fetchAll(db, sql: "SELECT name FROM sqlite_master WHERE type='table'")
 52 |             // Heuristics
 53 |             schema.messagesTable = tables.first { $0.lowercased().contains("message") }
    |             |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |             `- note: reference 'self.' explicitly
 54 |             schema.conversationsTable = tables.first { $0.lowercased().contains("conversation") }
 55 | 

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:54:13: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 48 |     private func discoverSchema() async throws {
 49 |         guard let dbPool else { return }
 50 |         try await dbPool.read { db in
    |                               `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 51 |             let tables = try String.fetchAll(db, sql: "SELECT name FROM sqlite_master WHERE type='table'")
 52 |             // Heuristics
 53 |             schema.messagesTable = tables.first { $0.lowercased().contains("message") }
 54 |             schema.conversationsTable = tables.first { $0.lowercased().contains("conversation") }
    |             |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |             `- note: reference 'self.' explicitly
 55 | 
 56 |             if let mt = schema.messagesTable {

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:56:25: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 48 |     private func discoverSchema() async throws {
 49 |         guard let dbPool else { return }
 50 |         try await dbPool.read { db in
    |                               `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 51 |             let tables = try String.fetchAll(db, sql: "SELECT name FROM sqlite_master WHERE type='table'")
 52 |             // Heuristics
    :
 54 |             schema.conversationsTable = tables.first { $0.lowercased().contains("conversation") }
 55 | 
 56 |             if let mt = schema.messagesTable {
    |                         |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                         `- note: reference 'self.' explicitly
 57 |                 let cols = try ColumnInfo.fetchAll(db, sql: "PRAGMA table_info(\(rawIdent(mt)))").map { $0.name.lowercased() }
 58 |                 schema.convIdColumn = cols.first { $0.contains("conversation") && $0.hasSuffix("id") } ?? cols.first { $0 == "conversation_id" || $0 == "conv_id" }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:58:17: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 48 |     private func discoverSchema() async throws {
 49 |         guard let dbPool else { return }
 50 |         try await dbPool.read { db in
    |                               `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 51 |             let tables = try String.fetchAll(db, sql: "SELECT name FROM sqlite_master WHERE type='table'")
 52 |             // Heuristics
    :
 56 |             if let mt = schema.messagesTable {
 57 |                 let cols = try ColumnInfo.fetchAll(db, sql: "PRAGMA table_info(\(rawIdent(mt)))").map { $0.name.lowercased() }
 58 |                 schema.convIdColumn = cols.first { $0.contains("conversation") && $0.hasSuffix("id") } ?? cols.first { $0 == "conversation_id" || $0 == "conv_id" }
    |                 |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                 `- note: reference 'self.' explicitly
 59 |                 schema.createdAtColumn = cols.first { $0.contains("created") || $0.contains("timestamp") || $0.contains("updated") }
 60 |                 // Keep token columns that exist

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:59:17: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 48 |     private func discoverSchema() async throws {
 49 |         guard let dbPool else { return }
 50 |         try await dbPool.read { db in
    |                               `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 51 |             let tables = try String.fetchAll(db, sql: "SELECT name FROM sqlite_master WHERE type='table'")
 52 |             // Heuristics
    :
 57 |                 let cols = try ColumnInfo.fetchAll(db, sql: "PRAGMA table_info(\(rawIdent(mt)))").map { $0.name.lowercased() }
 58 |                 schema.convIdColumn = cols.first { $0.contains("conversation") && $0.hasSuffix("id") } ?? cols.first { $0 == "conversation_id" || $0 == "conv_id" }
 59 |                 schema.createdAtColumn = cols.first { $0.contains("created") || $0.contains("timestamp") || $0.contains("updated") }
    |                 |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                 `- note: reference 'self.' explicitly
 60 |                 // Keep token columns that exist
 61 |                 schema.tokenColumns = schema.tokenColumns.filter { cols.contains($0) }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:61:17: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 48 |     private func discoverSchema() async throws {
 49 |         guard let dbPool else { return }
 50 |         try await dbPool.read { db in
    |                               `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 51 |             let tables = try String.fetchAll(db, sql: "SELECT name FROM sqlite_master WHERE type='table'")
 52 |             // Heuristics
    :
 59 |                 schema.createdAtColumn = cols.first { $0.contains("created") || $0.contains("timestamp") || $0.contains("updated") }
 60 |                 // Keep token columns that exist
 61 |                 schema.tokenColumns = schema.tokenColumns.filter { cols.contains($0) }
    |                 |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                 `- note: reference 'self.' explicitly
 62 |                 if schema.tokenColumns.isEmpty {
 63 |                     // fallback: any column ending with _tokens or token_count

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:61:39: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 48 |     private func discoverSchema() async throws {
 49 |         guard let dbPool else { return }
 50 |         try await dbPool.read { db in
    |                               `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 51 |             let tables = try String.fetchAll(db, sql: "SELECT name FROM sqlite_master WHERE type='table'")
 52 |             // Heuristics
    :
 59 |                 schema.createdAtColumn = cols.first { $0.contains("created") || $0.contains("timestamp") || $0.contains("updated") }
 60 |                 // Keep token columns that exist
 61 |                 schema.tokenColumns = schema.tokenColumns.filter { cols.contains($0) }
    |                                       |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                                       `- note: reference 'self.' explicitly
 62 |                 if schema.tokenColumns.isEmpty {
 63 |                     // fallback: any column ending with _tokens or token_count

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:62:20: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 48 |     private func discoverSchema() async throws {
 49 |         guard let dbPool else { return }
 50 |         try await dbPool.read { db in
    |                               `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 51 |             let tables = try String.fetchAll(db, sql: "SELECT name FROM sqlite_master WHERE type='table'")
 52 |             // Heuristics
    :
 60 |                 // Keep token columns that exist
 61 |                 schema.tokenColumns = schema.tokenColumns.filter { cols.contains($0) }
 62 |                 if schema.tokenColumns.isEmpty {
    |                    |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                    `- note: reference 'self.' explicitly
 63 |                     // fallback: any column ending with _tokens or token_count
 64 |                     schema.tokenColumns = cols.filter { $0.contains("token") }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:64:21: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 48 |     private func discoverSchema() async throws {
 49 |         guard let dbPool else { return }
 50 |         try await dbPool.read { db in
    |                               `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 51 |             let tables = try String.fetchAll(db, sql: "SELECT name FROM sqlite_master WHERE type='table'")
 52 |             // Heuristics
    :
 62 |                 if schema.tokenColumns.isEmpty {
 63 |                     // fallback: any column ending with _tokens or token_count
 64 |                     schema.tokenColumns = cols.filter { $0.contains("token") }
    |                     |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                     `- note: reference 'self.' explicitly
 65 |                 }
 66 |             }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:67:25: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 48 |     private func discoverSchema() async throws {
 49 |         guard let dbPool else { return }
 50 |         try await dbPool.read { db in
    |                               `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 51 |             let tables = try String.fetchAll(db, sql: "SELECT name FROM sqlite_master WHERE type='table'")
 52 |             // Heuristics
    :
 65 |                 }
 66 |             }
 67 |             if let ct = schema.conversationsTable {
    |                         |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                         `- note: reference 'self.' explicitly
 68 |                 let cols = try ColumnInfo.fetchAll(db, sql: "PRAGMA table_info(\(rawIdent(ct)))").map { $0.name.lowercased() }
 69 |                 schema.convCreatedAtColumn = cols.first { $0.contains("created") || $0.contains("timestamp") || $0.contains("updated") }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:69:17: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 48 |     private func discoverSchema() async throws {
 49 |         guard let dbPool else { return }
 50 |         try await dbPool.read { db in
    |                               `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 51 |             let tables = try String.fetchAll(db, sql: "SELECT name FROM sqlite_master WHERE type='table'")
 52 |             // Heuristics
    :
 67 |             if let ct = schema.conversationsTable {
 68 |                 let cols = try ColumnInfo.fetchAll(db, sql: "PRAGMA table_info(\(rawIdent(ct)))").map { $0.name.lowercased() }
 69 |                 schema.convCreatedAtColumn = cols.first { $0.contains("created") || $0.contains("timestamp") || $0.contains("updated") }
    |                 |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                 `- note: reference 'self.' explicitly
 70 |                 schema.convIdPrimary = cols.first { $0 == "id" || $0.hasSuffix("id") }
 71 |             }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:70:17: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 48 |     private func discoverSchema() async throws {
 49 |         guard let dbPool else { return }
 50 |         try await dbPool.read { db in
    |                               `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 51 |             let tables = try String.fetchAll(db, sql: "SELECT name FROM sqlite_master WHERE type='table'")
 52 |             // Heuristics
    :
 68 |                 let cols = try ColumnInfo.fetchAll(db, sql: "PRAGMA table_info(\(rawIdent(ct)))").map { $0.name.lowercased() }
 69 |                 schema.convCreatedAtColumn = cols.first { $0.contains("created") || $0.contains("timestamp") || $0.contains("updated") }
 70 |                 schema.convIdPrimary = cols.first { $0 == "id" || $0.hasSuffix("id") }
    |                 |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                 `- note: reference 'self.' explicitly
 71 |             }
 72 |         }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:53:13: error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: mutation of this property is only permitted within the actor
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 51 |             let tables = try String.fetchAll(db, sql: "SELECT name FROM sqlite_master WHERE type='table'")
 52 |             // Heuristics
 53 |             schema.messagesTable = tables.first { $0.lowercased().contains("message") }
    |             `- error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 54 |             schema.conversationsTable = tables.first { $0.lowercased().contains("conversation") }
 55 | 

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:54:13: error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: mutation of this property is only permitted within the actor
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 52 |             // Heuristics
 53 |             schema.messagesTable = tables.first { $0.lowercased().contains("message") }
 54 |             schema.conversationsTable = tables.first { $0.lowercased().contains("conversation") }
    |             `- error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 55 | 
 56 |             if let mt = schema.messagesTable {

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:56:25: error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: property declared here
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 54 |             schema.conversationsTable = tables.first { $0.lowercased().contains("conversation") }
 55 | 
 56 |             if let mt = schema.messagesTable {
    |                         `- error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 57 |                 let cols = try ColumnInfo.fetchAll(db, sql: "PRAGMA table_info(\(rawIdent(mt)))").map { $0.name.lowercased() }
 58 |                 schema.convIdColumn = cols.first { $0.contains("conversation") && $0.hasSuffix("id") } ?? cols.first { $0 == "conversation_id" || $0 == "conv_id" }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:58:17: error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: mutation of this property is only permitted within the actor
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 56 |             if let mt = schema.messagesTable {
 57 |                 let cols = try ColumnInfo.fetchAll(db, sql: "PRAGMA table_info(\(rawIdent(mt)))").map { $0.name.lowercased() }
 58 |                 schema.convIdColumn = cols.first { $0.contains("conversation") && $0.hasSuffix("id") } ?? cols.first { $0 == "conversation_id" || $0 == "conv_id" }
    |                 `- error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 59 |                 schema.createdAtColumn = cols.first { $0.contains("created") || $0.contains("timestamp") || $0.contains("updated") }
 60 |                 // Keep token columns that exist

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:59:17: error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: mutation of this property is only permitted within the actor
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 57 |                 let cols = try ColumnInfo.fetchAll(db, sql: "PRAGMA table_info(\(rawIdent(mt)))").map { $0.name.lowercased() }
 58 |                 schema.convIdColumn = cols.first { $0.contains("conversation") && $0.hasSuffix("id") } ?? cols.first { $0 == "conversation_id" || $0 == "conv_id" }
 59 |                 schema.createdAtColumn = cols.first { $0.contains("created") || $0.contains("timestamp") || $0.contains("updated") }
    |                 `- error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 60 |                 // Keep token columns that exist
 61 |                 schema.tokenColumns = schema.tokenColumns.filter { cols.contains($0) }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:61:17: error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: mutation of this property is only permitted within the actor
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 59 |                 schema.createdAtColumn = cols.first { $0.contains("created") || $0.contains("timestamp") || $0.contains("updated") }
 60 |                 // Keep token columns that exist
 61 |                 schema.tokenColumns = schema.tokenColumns.filter { cols.contains($0) }
    |                 `- error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 62 |                 if schema.tokenColumns.isEmpty {
 63 |                     // fallback: any column ending with _tokens or token_count

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:61:39: error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: property declared here
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 59 |                 schema.createdAtColumn = cols.first { $0.contains("created") || $0.contains("timestamp") || $0.contains("updated") }
 60 |                 // Keep token columns that exist
 61 |                 schema.tokenColumns = schema.tokenColumns.filter { cols.contains($0) }
    |                                       `- error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 62 |                 if schema.tokenColumns.isEmpty {
 63 |                     // fallback: any column ending with _tokens or token_count

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:62:20: error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: property declared here
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 60 |                 // Keep token columns that exist
 61 |                 schema.tokenColumns = schema.tokenColumns.filter { cols.contains($0) }
 62 |                 if schema.tokenColumns.isEmpty {
    |                    `- error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 63 |                     // fallback: any column ending with _tokens or token_count
 64 |                     schema.tokenColumns = cols.filter { $0.contains("token") }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:64:21: error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: mutation of this property is only permitted within the actor
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 62 |                 if schema.tokenColumns.isEmpty {
 63 |                     // fallback: any column ending with _tokens or token_count
 64 |                     schema.tokenColumns = cols.filter { $0.contains("token") }
    |                     `- error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 65 |                 }
 66 |             }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:67:25: error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: property declared here
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 65 |                 }
 66 |             }
 67 |             if let ct = schema.conversationsTable {
    |                         `- error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 68 |                 let cols = try ColumnInfo.fetchAll(db, sql: "PRAGMA table_info(\(rawIdent(ct)))").map { $0.name.lowercased() }
 69 |                 schema.convCreatedAtColumn = cols.first { $0.contains("created") || $0.contains("timestamp") || $0.contains("updated") }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:69:17: error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: mutation of this property is only permitted within the actor
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 67 |             if let ct = schema.conversationsTable {
 68 |                 let cols = try ColumnInfo.fetchAll(db, sql: "PRAGMA table_info(\(rawIdent(ct)))").map { $0.name.lowercased() }
 69 |                 schema.convCreatedAtColumn = cols.first { $0.contains("created") || $0.contains("timestamp") || $0.contains("updated") }
    |                 `- error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 70 |                 schema.convIdPrimary = cols.first { $0 == "id" || $0.hasSuffix("id") }
 71 |             }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:70:17: error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: mutation of this property is only permitted within the actor
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 68 |                 let cols = try ColumnInfo.fetchAll(db, sql: "PRAGMA table_info(\(rawIdent(ct)))").map { $0.name.lowercased() }
 69 |                 schema.convCreatedAtColumn = cols.first { $0.contains("created") || $0.contains("timestamp") || $0.contains("updated") }
 70 |                 schema.convIdPrimary = cols.first { $0 == "id" || $0.hasSuffix("id") }
    |                 `- error: actor-isolated property 'schema' can not be mutated from a Sendable closure
 71 |             }
 72 |         }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:90:33: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 86 |         guard let dbPool else { throw NSError(domain: "QDBReader", code: 1, userInfo: [NSLocalizedDescriptionKey: "DB not open"]) }
 87 | 
 88 |         return try await dbPool.read { db in
    |                                      `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 89 |             let now = Date()
 90 |             let messagesTable = schema.messagesTable ?? "messages"
    |                                 |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                                 `- note: reference 'self.' explicitly
 91 | 
 92 |             // Determine current conversation id (most recent activity)

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:94:25: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 86 |         guard let dbPool else { throw NSError(domain: "QDBReader", code: 1, userInfo: [NSLocalizedDescriptionKey: "DB not open"]) }
 87 | 
 88 |         return try await dbPool.read { db in
    |                                      `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 89 |             let now = Date()
 90 |             let messagesTable = schema.messagesTable ?? "messages"
    :
 92 |             // Determine current conversation id (most recent activity)
 93 |             var latestConversationId: String? = nil
 94 |             if let ct = schema.conversationsTable, let convId = schema.convIdPrimary, let cts = schema.convCreatedAtColumn {
    |                         |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                         `- note: reference 'self.' explicitly
 95 |                 latestConversationId = try String.fetchOne(db, sql: "SELECT \(rawIdent(convId)) FROM \(rawIdent(ct)) ORDER BY \(rawIdent(cts)) DESC LIMIT 1")
 96 |             } else if let convIdCol = schema.convIdColumn, let tsCol = schema.createdAtColumn {

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:94:65: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 86 |         guard let dbPool else { throw NSError(domain: "QDBReader", code: 1, userInfo: [NSLocalizedDescriptionKey: "DB not open"]) }
 87 | 
 88 |         return try await dbPool.read { db in
    |                                      `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 89 |             let now = Date()
 90 |             let messagesTable = schema.messagesTable ?? "messages"
    :
 92 |             // Determine current conversation id (most recent activity)
 93 |             var latestConversationId: String? = nil
 94 |             if let ct = schema.conversationsTable, let convId = schema.convIdPrimary, let cts = schema.convCreatedAtColumn {
    |                                                                 |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                                                                 `- note: reference 'self.' explicitly
 95 |                 latestConversationId = try String.fetchOne(db, sql: "SELECT \(rawIdent(convId)) FROM \(rawIdent(ct)) ORDER BY \(rawIdent(cts)) DESC LIMIT 1")
 96 |             } else if let convIdCol = schema.convIdColumn, let tsCol = schema.createdAtColumn {

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:94:97: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 86 |         guard let dbPool else { throw NSError(domain: "QDBReader", code: 1, userInfo: [NSLocalizedDescriptionKey: "DB not open"]) }
 87 | 
 88 |         return try await dbPool.read { db in
    |                                      `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 89 |             let now = Date()
 90 |             let messagesTable = schema.messagesTable ?? "messages"
    :
 92 |             // Determine current conversation id (most recent activity)
 93 |             var latestConversationId: String? = nil
 94 |             if let ct = schema.conversationsTable, let convId = schema.convIdPrimary, let cts = schema.convCreatedAtColumn {
    |                                                                                                 |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                                                                                                 `- note: reference 'self.' explicitly
 95 |                 latestConversationId = try String.fetchOne(db, sql: "SELECT \(rawIdent(convId)) FROM \(rawIdent(ct)) ORDER BY \(rawIdent(cts)) DESC LIMIT 1")
 96 |             } else if let convIdCol = schema.convIdColumn, let tsCol = schema.createdAtColumn {

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:96:39: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 86 |         guard let dbPool else { throw NSError(domain: "QDBReader", code: 1, userInfo: [NSLocalizedDescriptionKey: "DB not open"]) }
 87 | 
 88 |         return try await dbPool.read { db in
    |                                      `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 89 |             let now = Date()
 90 |             let messagesTable = schema.messagesTable ?? "messages"
    :
 94 |             if let ct = schema.conversationsTable, let convId = schema.convIdPrimary, let cts = schema.convCreatedAtColumn {
 95 |                 latestConversationId = try String.fetchOne(db, sql: "SELECT \(rawIdent(convId)) FROM \(rawIdent(ct)) ORDER BY \(rawIdent(cts)) DESC LIMIT 1")
 96 |             } else if let convIdCol = schema.convIdColumn, let tsCol = schema.createdAtColumn {
    |                                       |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                                       `- note: reference 'self.' explicitly
 97 |                 latestConversationId = try String.fetchOne(db, sql: "SELECT \(rawIdent(convIdCol)) FROM \(rawIdent(messagesTable)) ORDER BY \(rawIdent(tsCol)) DESC LIMIT 1")
 98 |             }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:96:72: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 86 |         guard let dbPool else { throw NSError(domain: "QDBReader", code: 1, userInfo: [NSLocalizedDescriptionKey: "DB not open"]) }
 87 | 
 88 |         return try await dbPool.read { db in
    |                                      `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 89 |             let now = Date()
 90 |             let messagesTable = schema.messagesTable ?? "messages"
    :
 94 |             if let ct = schema.conversationsTable, let convId = schema.convIdPrimary, let cts = schema.convCreatedAtColumn {
 95 |                 latestConversationId = try String.fetchOne(db, sql: "SELECT \(rawIdent(convId)) FROM \(rawIdent(ct)) ORDER BY \(rawIdent(cts)) DESC LIMIT 1")
 96 |             } else if let convIdCol = schema.convIdColumn, let tsCol = schema.createdAtColumn {
    |                                                                        |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                                                                        `- note: reference 'self.' explicitly
 97 |                 latestConversationId = try String.fetchOne(db, sql: "SELECT \(rawIdent(convIdCol)) FROM \(rawIdent(messagesTable)) ORDER BY \(rawIdent(tsCol)) DESC LIMIT 1")
 98 |             }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:102:16: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 86 |         guard let dbPool else { throw NSError(domain: "QDBReader", code: 1, userInfo: [NSLocalizedDescriptionKey: "DB not open"]) }
 87 | 
 88 |         return try await dbPool.read { db in
    |                                      `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 89 |             let now = Date()
 90 |             let messagesTable = schema.messagesTable ?? "messages"
    :
100 |             // Build token sum expression
101 |             let sumExpr: String
102 |             if schema.tokenColumns.isEmpty {
    |                |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                `- note: reference 'self.' explicitly
103 |                 sumExpr = "COUNT(*)" // fallback surrogate
104 |             } else {

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:105:29: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 86 |         guard let dbPool else { throw NSError(domain: "QDBReader", code: 1, userInfo: [NSLocalizedDescriptionKey: "DB not open"]) }
 87 | 
 88 |         return try await dbPool.read { db in
    |                                      `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 89 |             let now = Date()
 90 |             let messagesTable = schema.messagesTable ?? "messages"
    :
103 |                 sumExpr = "COUNT(*)" // fallback surrogate
104 |             } else {
105 |                 let terms = schema.tokenColumns.map { "COALESCE(\($0),0)" }.joined(separator: "+")
    |                             |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                             `- note: reference 'self.' explicitly
106 |                 sumExpr = terms
107 |             }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:112:64: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 86 |         guard let dbPool else { throw NSError(domain: "QDBReader", code: 1, userInfo: [NSLocalizedDescriptionKey: "DB not open"]) }
 87 | 
 88 |         return try await dbPool.read { db in
    |                                      `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 89 |             let now = Date()
 90 |             let messagesTable = schema.messagesTable ?? "messages"
    :
110 |             var tokensUsed: Int = 0
111 |             var msgCount: Int = 0
112 |             if let cid = latestConversationId, let convIdCol = schema.convIdColumn {
    |                                                                |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                                                                `- note: reference 'self.' explicitly
113 |                 let row = try Row.fetchOne(db, sql: "SELECT SUM(\(sumExpr)) AS tokens, COUNT(*) AS cnt FROM \(rawIdent(messagesTable)) WHERE \(rawIdent(convIdCol)) = ?", arguments: [cid])
114 |                 tokensUsed = row?["tokens"] as? Int ?? 0

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:116:35: error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
 86 |         guard let dbPool else { throw NSError(domain: "QDBReader", code: 1, userInfo: [NSLocalizedDescriptionKey: "DB not open"]) }
 87 | 
 88 |         return try await dbPool.read { db in
    |                                      `- note: capture 'self' explicitly to enable implicit 'self' in this closure
 89 |             let now = Date()
 90 |             let messagesTable = schema.messagesTable ?? "messages"
    :
114 |                 tokensUsed = row?["tokens"] as? Int ?? 0
115 |                 msgCount = row?["cnt"] as? Int ?? 0
116 |             } else if let tsCol = schema.createdAtColumn { // recent hour
    |                                   |- error: reference to property 'schema' in closure requires explicit use of 'self' to make capture semantics explicit
    |                                   `- note: reference 'self.' explicitly
117 |                 let since = now.addingTimeInterval(-3600)
118 |                 let row = try Row.fetchOne(db, sql: "SELECT SUM(\(sumExpr)) AS tokens, COUNT(*) AS cnt FROM \(rawIdent(messagesTable)) WHERE \(rawIdent(tsCol)) >= ?", arguments: [since])

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:90:33: error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: property declared here
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 88 |         return try await dbPool.read { db in
 89 |             let now = Date()
 90 |             let messagesTable = schema.messagesTable ?? "messages"
    |                                 `- error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 91 | 
 92 |             // Determine current conversation id (most recent activity)

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:94:25: error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: property declared here
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 92 |             // Determine current conversation id (most recent activity)
 93 |             var latestConversationId: String? = nil
 94 |             if let ct = schema.conversationsTable, let convId = schema.convIdPrimary, let cts = schema.convCreatedAtColumn {
    |                         `- error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 95 |                 latestConversationId = try String.fetchOne(db, sql: "SELECT \(rawIdent(convId)) FROM \(rawIdent(ct)) ORDER BY \(rawIdent(cts)) DESC LIMIT 1")
 96 |             } else if let convIdCol = schema.convIdColumn, let tsCol = schema.createdAtColumn {

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:94:65: error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: property declared here
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 92 |             // Determine current conversation id (most recent activity)
 93 |             var latestConversationId: String? = nil
 94 |             if let ct = schema.conversationsTable, let convId = schema.convIdPrimary, let cts = schema.convCreatedAtColumn {
    |                                                                 `- error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 95 |                 latestConversationId = try String.fetchOne(db, sql: "SELECT \(rawIdent(convId)) FROM \(rawIdent(ct)) ORDER BY \(rawIdent(cts)) DESC LIMIT 1")
 96 |             } else if let convIdCol = schema.convIdColumn, let tsCol = schema.createdAtColumn {

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:94:97: error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: property declared here
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 92 |             // Determine current conversation id (most recent activity)
 93 |             var latestConversationId: String? = nil
 94 |             if let ct = schema.conversationsTable, let convId = schema.convIdPrimary, let cts = schema.convCreatedAtColumn {
    |                                                                                                 `- error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 95 |                 latestConversationId = try String.fetchOne(db, sql: "SELECT \(rawIdent(convId)) FROM \(rawIdent(ct)) ORDER BY \(rawIdent(cts)) DESC LIMIT 1")
 96 |             } else if let convIdCol = schema.convIdColumn, let tsCol = schema.createdAtColumn {

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:96:39: error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: property declared here
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 94 |             if let ct = schema.conversationsTable, let convId = schema.convIdPrimary, let cts = schema.convCreatedAtColumn {
 95 |                 latestConversationId = try String.fetchOne(db, sql: "SELECT \(rawIdent(convId)) FROM \(rawIdent(ct)) ORDER BY \(rawIdent(cts)) DESC LIMIT 1")
 96 |             } else if let convIdCol = schema.convIdColumn, let tsCol = schema.createdAtColumn {
    |                                       `- error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 97 |                 latestConversationId = try String.fetchOne(db, sql: "SELECT \(rawIdent(convIdCol)) FROM \(rawIdent(messagesTable)) ORDER BY \(rawIdent(tsCol)) DESC LIMIT 1")
 98 |             }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:96:72: error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: property declared here
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
 94 |             if let ct = schema.conversationsTable, let convId = schema.convIdPrimary, let cts = schema.convCreatedAtColumn {
 95 |                 latestConversationId = try String.fetchOne(db, sql: "SELECT \(rawIdent(convId)) FROM \(rawIdent(ct)) ORDER BY \(rawIdent(cts)) DESC LIMIT 1")
 96 |             } else if let convIdCol = schema.convIdColumn, let tsCol = schema.createdAtColumn {
    |                                                                        `- error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 97 |                 latestConversationId = try String.fetchOne(db, sql: "SELECT \(rawIdent(convIdCol)) FROM \(rawIdent(messagesTable)) ORDER BY \(rawIdent(tsCol)) DESC LIMIT 1")
 98 |             }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:102:16: error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: property declared here
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
100 |             // Build token sum expression
101 |             let sumExpr: String
102 |             if schema.tokenColumns.isEmpty {
    |                `- error: actor-isolated property 'schema' can not be referenced from a Sendable closure
103 |                 sumExpr = "COUNT(*)" // fallback surrogate
104 |             } else {

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:105:29: error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: property declared here
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
103 |                 sumExpr = "COUNT(*)" // fallback surrogate
104 |             } else {
105 |                 let terms = schema.tokenColumns.map { "COALESCE(\($0),0)" }.joined(separator: "+")
    |                             `- error: actor-isolated property 'schema' can not be referenced from a Sendable closure
106 |                 sumExpr = terms
107 |             }

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:112:64: error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: property declared here
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
110 |             var tokensUsed: Int = 0
111 |             var msgCount: Int = 0
112 |             if let cid = latestConversationId, let convIdCol = schema.convIdColumn {
    |                                                                `- error: actor-isolated property 'schema' can not be referenced from a Sendable closure
113 |                 let row = try Row.fetchOne(db, sql: "SELECT SUM(\(sumExpr)) AS tokens, COUNT(*) AS cnt FROM \(rawIdent(messagesTable)) WHERE \(rawIdent(convIdCol)) = ?", arguments: [cid])
114 |                 tokensUsed = row?["tokens"] as? Int ?? 0

/Users/stevengonsalvez/d/git/qlips-menubar/q-status-menubar/Sources/Core/QDBReader.swift:116:35: error: actor-isolated property 'schema' can not be referenced from a Sendable closure
 23 |         var convIdPrimary: String?
 24 |     }
 25 |     private var schema = SchemaMap(messagesTable: nil,
    |                 `- note: property declared here
 26 |                                    conversationsTable: nil,
 27 |                                    convIdColumn: nil,
    :
114 |                 tokensUsed = row?["tokens"] as? Int ?? 0
115 |                 msgCount = row?["cnt"] as? Int ?? 0
116 |             } else if let tsCol = schema.createdAtColumn { // recent hour
    |                                   `- error: actor-isolated property 'schema' can not be referenced from a Sendable closure
117 |                 let since = now.addingTimeInterval(-3600)
118 |                 let row = try Row.fetchOne(db, sql: "SELECT SUM(\(sumExpr)) AS tokens, COUNT(*) AS cnt FROM \(rawIdent(messagesTable)) WHERE \(rawIdent(tsCol)) >= ?", arguments: [since])
